//This is a declaration that this project has been solely my own work except elements which I have explicitly attributed to another source.
// Student Michael Wall 13522003

/*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/

options {
  JAVA_UNICODE_ESCAPE = true;
  IGNORE_CASE = true;
}

/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/

// This section borrows from the lecture notes as a template for parsing tokens

PARSER_BEGIN(CCALParser)

public class CCALParser {

    public static void main(String args[]) {

        CCALParser parser;

        if (args.length == 0) {

            System.out.println("CCAL Parser:  Reading from standard input . . .");
            parser = new CCALParser(System.in);

        } else if (args.length == 1) {

            System.out.println("CCAL Parser:  Reading from file " + args[0] + " . . .");

            try {

                parser = new CCALParser(new java.io.FileInputStream(args[0]));

            } catch (java.io.FileNotFoundException e) {

                System.out.println("CCAL Parser:  File " + args[0] + " not found.");
                return;
            }

        } else {

            System.out.println("CCAL Parser:  Usage is one of:");
            System.out.println("         java CCALParser < inputfile");
            System.out.println("OR");
            System.out.println("         java CCALParser inputfile");
            return;

        } try {

            parser.Program();
            System.out.println("CCAL Parser: CCAL program parsed successfully.");

        } catch (ParseException e) {

            System.out.println(e.getMessage());
            System.out.println("CCAL Parser:  Encountered errors during parse.");
        }
    }
}

PARSER_END(CCALParser)

/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

// The handling of comments borrows from the lecture notes.

TOKEN_MGR_DECLS : {

    static int commentNesting=0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/ {

    // We will ignore any spaces, tabs, newlines,
    // carriage returns, or form feeds.
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"

    // We will also ignore any comments
    | "/*" { commentNesting++; } : IN_COMMENT
    | < "//" ( ~["\r", "\n" ] )* >
}

<IN_COMMENT> SKIP : {

      "/*" { commentNesting++; }
    | "*/" {
        commentNesting--;
        if (commentNesting == 0) {
            SwitchTo(DEFAULT);
        }
    }
    | <~[]>
}

TOKEN : {

    // reserved words in the language are
    < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < INTEGER : "integer" >
    | < BOOLEAN : "boolean" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < WHILE : "while" >
    | < SKIPPER : "skip" >

    // the following are tokens in the language
    | < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LCB : "{" >
    | < RCB : "}" >
    | < LBR : "(" >
    | < RBR : ")" >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < NEGATE : "~" >
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUAL : "==" >
    | < NOT_EQ : "!=" >
    | < LT : "<" >
    | < LTEQ : "<=" >
    | < GT : ">" >
    | < GTEQ : ">=" >

    // Integers are a string of one or more digits
    // that do not start with '0', unless it is a '0'
    // on its own. Integers can be negative.
    | < NUM : (["0"]) | (<MINUS_SIGN> ["1" - "9"] (<DIGIT>)*) | (["1" - "9"] (<DIGIT>)*) >
    | < #DIGIT : ["0" - "9"] >

    // Identifiers are a string of letters, digits,
    // or underscore starting with a letter
    | < ID : (<LETTER>) (<LETTER> | <DIGIT> | "_")* >
    | < #LETTER : ["a" - "z", "A" - "Z"] >

    // Anything which we have not recognised so far
    | < OTHER : ~[] >
}

/***************************
 * SECTION 4 - THE GRAMMAR *
 ***************************/

void Program() : {} {

    DeclarationList() FunctionList() Main()
}

void DeclarationList() : {} {

    (Declaration() <SEMIC> DeclarationList())
    | {}
}

void Declaration() : {} {

    VariableDeclaration()
    | ConstantDeclaration()
}

void VariableDeclaration() : {} {

    <VAR> <ID> <COLON> Type()
}

void ConstantDeclaration() : {} {

    <CONST> <ID> <COLON> Type() <ASSIGN> Expression()
}

void FunctionList() : {} {

    (Function() FunctionList())
    | {}
}

void Function() : {} {

    Type() <ID> <LBR> ParameterList() <RBR>
    <LCB>
    DeclarationList()
    StatementBlock()
    <RETURN> <LBR> (Expression() | {}) <RBR> <SEMIC>
    <RCB>
}

void Type() : {} {

    <INTEGER> | <BOOLEAN> | <VOID>
}

void ParameterList() : {} {

    NempParameterList()
    | {}
}

void NempParameterList() : {} {

    <ID> <COLON> Type() (
        <COMMA> NempParameterList()
        | {}
    )
}

void Main() : {} {

    <MAIN> <LCB>
    DeclarationList()
    StatementBlock()
    <RCB>
}

void StatementBlock() : {} {

    (Statement() StatementBlock())
    | {}
}

void Statement() : {} {

    <ID> (
        <ASSIGN> Expression() <SEMIC>
        | <LBR> ArgumentList() <RBR> <SEMIC>
    )
    | <LCB> StatementBlock() <RCB>
    | <IF> Condition() <LCB> StatementBlock() <RCB> <ELSE> <LCB> StatementBlock() <RCB>
    | <WHILE> Condition() <LCB> StatementBlock() <RCB>
    | <SKIPPER> <SEMIC>
}

// First occurrence of left recursion was indirect left recursion

// void Expression() : {} {
//
//     Fragment() BinaryArithmeticOperation() Fragment()
//     | <LBR> Expression() <RBR>
//     | <ID> <LBR> ArgumentList() <RBR>
//     | Fragment()
// }
//
// void Fragment() : {} {
//
//     <ID>
//     | <MINUS_SIGN> <ID>
//     | <NUM>
//     | <TRUE>
//     | <FALSE>
//     | Expression()
// }


// references for removing left recursion (direct and indirect):
// http://www.cs.may.ie/staff/jpower/Courses/Previous/parsing/node30.html
// http://www.cset.oit.edu/~yangs/cst320/lectures/grammarmod.pdf

void Expression() : {} {

    Fragment() (
        BinaryArithmeticOperation() Fragment()
        | {}
    )
}

void Fragment() : {} {
    <ID> (
        <LBR> ArgumentList() <RBR> FragmentPrime()
        | FragmentPrime()
    )
    | <MINUS_SIGN> <ID> FragmentPrime()
    | <NUM> FragmentPrime()
    | <TRUE> FragmentPrime()
    | <FALSE> FragmentPrime()
    | <LBR> Expression() <RBR> FragmentPrime()
}

void FragmentPrime() : {} {

    BinaryArithmeticOperation() Fragment() FragmentPrime()
    | {}
}

void BinaryArithmeticOperation() : {} {

    <PLUS_SIGN> | <MINUS_SIGN>
}

// Second occurrence was direct left recursion:

// void Condition() : {} {
//
//     <NEGATE> Condition()
//     | <LBR> Condition() <RBR>
//     | Expression() ComparisonOperator() Expression()
//     | Condition() (<OR> | <AND>) Condition()
// }

void Condition() : {} {
    LOOKAHEAD(3)
     <LBR> Condition() <RBR> ConditionPrime()
    | <NEGATE> Condition() ConditionPrime()
    | Expression() ComparisonOperator() Expression() ConditionPrime()
}

void ConditionPrime() : {} {

    (<OR> | <AND>) Condition() ConditionPrime()
    | {}
}

void ComparisonOperator() : {} {

    <EQUAL>
    | <NOT_EQ>
    | <LT>
    | <LTEQ>
    | <GT>
    | <GTEQ>
}

void ArgumentList() : {} {

    NempArgumentList()
    | {}
}

void NempArgumentList() : {} {

    <ID> (
        <COMMA> NempArgumentList()
        | {}
    )
}
